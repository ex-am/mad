1.	Android Manifest: AndroidManifest.xml

We need to give uses-permission for WAKE_LOCK, other than that the AndroidManifest.xml is pretty standard one. So, include the service and receiver.
 
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns: android="http://schemas.android.com/apk/res/android"package="com.javapapers.androidalarmclock">
<uses-permission android:name="android.permission.WAKE_LOCK" />
<application android:allowBackup="true" android:icon="@drawable/ic_launcher" android:label="@string/app_name" android:theme="@style/AppTheme">
<activity android:name=".AlarmActivity" android:label="@string/app_name">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
<service android:name=".AlarmService" android:enabled="true" />
<receiver android:name=".AlarmReceiver" />
</application>
</manifest>

2.	Android Activity: activity_my.xml
We have a TimePicker component followed by a ToggleButton. Thatâ€™s it. Choose the time to set the alarm and toggle the switch to on. The alarm will work.

<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin" android:paddingRight="@dimen/activity_horizontal_margin" android:paddingTop="@dimen/activity_vertical_margin" android:paddingBottom="@dimen/activity_vertical_margin" tools:context=".MyActivity">
<TimePicker android:layout_width="wrap_content" android:layout_height="wrap_content" android:id="@+id/alarmTimePicker" android:layout_alignParentTop="true" android:layout_centerHorizontal="true" />
<ToggleButton android:layout_width="wrap_content" android:layout_height="wrap_content"
 
android:text="Alarm On/Off" android:id="@+id/alarmToggle" android:layout_centerHorizontal="true" android:layout_below="@+id/alarmTimePicker" android:onClick="onToggleClicked" />
<TextView android:layout_width="wrap_content" android:layout_height="wrap_content"
android:textAppearance="?android:attr/textAppearanceLarge" android:text=""
android:id="@+id/alarmText" android:layout_alignParentBottom="true" android:layout_centerHorizontal="true" android:layout_marginTop="20dp" android:layout_below="@+id/alarmToggle" />
</RelativeLayout>

AlarmActivity.java
AlarmActivity uses the AlarmManager to set the alarm and send notification on alarm trigger.

package com.javapapers.androidalarmclock; import android.app.Activity;
import android.app.AlarmManager; import android.app.PendingIntent; import android.content.Intent; import android.os.Bundle;
import android.util.Log; import android.view.View;
import android.widget.TextView; import android.widget.TimePicker; import android.widget.ToggleButton; import java.util.Calendar;
public class AlarmActivity extends Activity { AlarmManager alarmManager;
private PendingIntent pendingIntent; private TimePicker alarmTimePicker; private static AlarmActivity inst; private TextView alarmTextView; public static AlarmActivity instance() { return inst;
}
@Override
public void onStart() { super.onStart();
inst = this;
}
@Override
 
protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_my);
alarmTimePicker = (TimePicker)findViewById(R.id.alarmTimePicker); alarmTextView = (TextView) findViewById(R.id.alarmText); ToggleButton alarmToggle = (ToggleButton) findViewById(R.id.alarmToggle);
alarmManager = (AlarmManager) getSystemService(ALARM_SERVICE); } public void onToggleClicked(View view) {
if (((ToggleButton) view).isChecked()) { Log.d("MyActivity", "Alarm On"); Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.HOUR_OF_DAY, alarmTimePicker.getCurrentHour()); calendar.set(Calendar.MINUTE, alarmTimePicker.getCurrentMinute());
Intent myIntent = new Intent(AlarmActivity.this, AlarmReceiver.class);
pendingIntent = PendingIntent.getBroadcast(AlarmActivity.this, 0,myIntent, 0); alarmManager.set(AlarmManager.RTC,calendar.getTimeInMillis(), pendingIntent);
} else { alarmManager.cancel(pendingIntent); setAlarmText(""); Log.d("MyActivity", "Alarm Off");
}}
public void setAlarmText(String alarmText) { alarmTextView.setText(alarmText);
}}

3.	Alarm Receiver: AlarmReceiver.java
Alarm Receiver is a WakefulBroadcastReceiver; this is the one that receives the alarm trigger onset time. From here we initiate different actions to notify the user as per our choice. I have given three type of notifications, first show a message to user in the activity UI, second play the alarm ringtone and third send an Android notification message. So this is the place to add enhancement for different types of user notifications.

package com.javapapers.androidalarmclock; import android.app.Activity;
import android.content.ComponentName; import android.content.Context;
import android.content.Intent; import android.media.Ringtone;
import android.media.RingtoneManager; import android.net.Uri;
import android.support.v4.content.WakefulBroadcastReceiver; public class AlarmReceiver extends WakefulBroadcastReceiver { @Override
public void onReceive(final Context context, Intent intent) {
 
//this will update the UI with message AlarmActivity inst = AlarmActivity.instance(); inst.setAlarmText("Alarm! Wake up! Wake up!"); setLooping(true)
Uri alarmUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM); if (alarmUri == null) {
alarmUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
}
Ringtone ringtone = RingtoneManager.getRingtone(context, alarmUri); ringtone.play();
//this will send a notification message
ComponentName comp = new ComponentName(context.getPackageName(), AlarmService.class.getName());
startWakefulService(context, (intent.setComponent(comp))); setResultCode(Activity.RESULT_OK);
}}

4.	Alarm Notification Message: AlarmService.java
The receiver will start the following IntentService to send a standard notification to the user.

package com.javapapers.androidalarmclock; import android.app.IntentService;
import android.app.NotificationManager; import android.app.PendingIntent; import android.content.Context;
import android.content.Intent;
import android.support.v4.app.NotificationCompat; import android.util.Log;
public class AlarmService extends IntentService { private NotificationManager alarmNotificationManager; public AlarmService() {
super("AlarmService");
}
@Override
public void onHandleIntent(Intent intent) { sendNotification("Wake Up! Wake Up!");
}
private void sendNotification(String msg) { Log.d("AlarmService", "Preparing to send notification...: " + msg); alarmNotificationManager = (NotificationManager) this.getSystemService(Context.NOTIFICATION_SERVICE); PendingIntentcontentIntent = PendingIntent.getActivity(this, 0, new Intent(this, AlarmActivity.class), 0);
NotificationCompat.BuilderalamNotificationBuilder = newNotificationCompat.Builder(this). setContentTitle("Alarm").setSmallIcon(R.drawable.ic_launcher)
.setStyle(new NotificationCompat.BigTextStyle().bigText(msg))
 
.setContentText(msg); alamNotificationBuilder.setContentIntent(contentIntent); alarmNotificationManager.notify(1, alamNotificationBuilder.build()); Log.d("AlarmService", "Notification sent.");
}}
